<?php

namespace CartBundle\Repository;

/**
 * FormatRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class FormatRepository extends \Doctrine\ORM\EntityRepository
{

    public function getFormatsQuantity($user)
    {
        return $this->createQueryBuilder('format')
                        ->join('format.quantities', 'quantity')
                        ->join('quantity.cart', 'cart')
                        ->where('cart.user = :user')
                        ->setParameter('user', $user)
                        ->select('format.id AS formatID, SUM(quantity.quantity) AS quantityValue')
                        ->groupBy('format.id')
                        ->getQuery()
                        ->getArrayResult();
    }

    public function getAllPrices()
    {
        $query = $this->createQueryBuilder('format')
                ->join('format.prices', 'price')
                ->addSelect('price')
                ->leftjoin('price.discount', 'discount')
                ->orderBy('format.id', 'ASC')
                ->addOrderBy('price.quantity', 'ASC')
        ;

        $query->AndWhere(
                $query->expr()->orX(
                        $query->expr()->isNull('price.discount'), $query->expr()->andX(
                                $query->expr()->orX(
                                        $query->expr()->lte('discount.startTime', ':now'), $query->expr()->isNull('discount.startTime')
                                ), $query->expr()->orX(
                                        $query->expr()->gte('discount.stopTime', ':now'), $query->expr()->isNull('discount.stopTime')
                                ), $query->expr()->eq('discount.active', ':active')
                        )
                )
        );

        $query->setParameters(array(
            'now' => new \DateTime('now'),
            'active' => true
        ));

        return $query->getQuery()->getResult();
    }

    public function getAllFormatPriceDiscount()
    {
        return $this->createQueryBuilder('format')
                        ->leftJoin('format.prices', 'price')
                        ->addSelect('price')
                        ->leftJoin('price.discount', 'discount')
                        ->addSelect('discount')
                        ->orderBy('format.size', 'ASC')
                        ->addOrderBy('price.quantity', 'ASC')
                        ->addOrderBy('price.price', 'ASC')
                        ->getQuery()
                        ->getResult();
    }

    public function getOrderDetail($id)
    {
        return $this->createQueryBuilder('format')
                        ->join('format.orderQuantities', 'quantity')
                        ->addSelect('quantity')
                        ->join('quantity.detail', 'detail')
                        ->addSelect('detail')
                        ->join('detail.photo', 'photo')
                        ->addSelect('photo')
                        ->join('detail.order', 'orderheader')
                        ->where('orderheader.id = :id')
                        ->setParameter('id', $id)
                        ->getQuery()
                        ->getResult();
    }

    public function getFormatArray()
    {
        return $this->createQueryBuilder('format')
            ->select('format.size, format.print, format.printCrop, format.printSquare')
            ->getQuery()
            ->getScalarResult();
    }
}
