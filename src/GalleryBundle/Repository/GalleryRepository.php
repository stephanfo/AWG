<?php

namespace GalleryBundle\Repository;

use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * GalleryRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class GalleryRepository extends \Doctrine\ORM\EntityRepository
{

    public function getGalleriesPaginator($page = null, $nbPerPage = null)
    {
        $query = $this->createQueryBuilder("gallery")
            ->select("gallery AS galleryEntity")
            ->leftjoin("gallery.photos", "photo")
            ->addSelect("COUNT(photo.id) AS photoCount")
            ->groupBy("gallery")
            ->orderBy("gallery.date", "DESC")
        ;

        if (!is_null($page) && !is_null($nbPerPage))
            $query
                ->setFirstResult(($page - 1) * $nbPerPage)
                ->setMaxResults($nbPerPage);

        return new Paginator($query, true);
    }

    public function getGalleryDetail($id)
    {
        return $this->createQueryBuilder("gallery")
            ->leftjoin("gallery.photos", "photo")
            ->addSelect("photo")
            ->where("gallery.id = :id")
            ->setParameter("id", $id)
            ->orderBy("photo.id", "ASC")
            ->getQuery()
            ->getSingleResult()
            ;
    }

    public function getActiveGalleriesAndPhotoCount()
    {
        return $this->createQueryBuilder("gallery")
            ->select("gallery AS galleryEntity")
            ->leftjoin("gallery.photos", "photo")
            ->addSelect("COUNT(photo.id) AS photoCount")
            ->where('gallery.active = :active')
            ->setParameter('active', true)
            ->groupBy("gallery")
            ->orderBy("gallery.date", "ASC")
            ->getQuery()
            ->getResult()
            ;
    }

    public function getActiveGalleriesDetail($galleryId = null)
    {
        $query = $this->createQueryBuilder("gallery")
            ->join("gallery.photos", "photo")
            ->addSelect("photo")
            ->where('gallery.active = :active')
            ->setParameter('active', true)
        ;

        if(!is_null($galleryId))
        {
            $query
                ->andWhere('gallery.id = :galleryId')
                ->setParameter('galleryId', $galleryId)
            ;
        }

        $query
            ->orderBy("gallery.date", "ASC")
            ->addOrderBy("photo.id", "ASC")
        ;

        return $query
            ->getQuery()
            ->getResult()
            ;
    }

    public function getLastActiveGalleries()
    {
        return $this->createQueryBuilder("gallery")
            ->where('gallery.active = :active')
            ->setParameter('active', true)
            ->orderBy("gallery.date", "DESC")
            ->setMaxResults(1)
            ->getQuery()
            ->getOneOrNullResult()
            ;
    }


    public function getGalleriesArray()
    {
        return $this->createQueryBuilder("gallery")
            ->join("gallery.photos", "photo")
            ->select('gallery.title, gallery.detail, gallery.comment, gallery.date, gallery.active, photo.title AS picture, photo.doNotCrop, photo.likeCount')
            ->orderBy("gallery.created", "ASC")
            ->addOrderBy("photo.created", "ASC")
            ->getQuery()
            ->getScalarResult()
            ;
    }

}
